/**
 * \file test_vccrypt_hmac512_256_ref.cpp
 *
 * Unit tests for the reference HMAC-SHA-512/256 implementation.
 *
 * \copyright 2017-2023 Velo-Payments, Inc.  All rights reserved.
 */

#include <minunit/minunit.h>
#include <string.h>
#include <vccrypt/mac.h>
#include <vpr/allocator/malloc_allocator.h>

class vccrypt_hmac512_256_ref_test {
public:
    void setUp()
    {
        //make sure HMAC-512/256 has been registered
        vccrypt_mac_register_SHA_2_512_256_HMAC();

        hmac_init_result =
            vccrypt_mac_options_init(
                &options, &alloc_opts,
                VCCRYPT_MAC_ALGORITHM_SHA_2_512_256_HMAC);

        malloc_allocator_options_init(&alloc_opts);

        //create a dummy key
        buffer_init_result =
            vccrypt_buffer_init(&dummyKey, &alloc_opts, 32);
        if (buffer_init_result == 0)
            memset(dummyKey.data, 0, dummyKey.size);
    }

    void tearDown()
    {
        if (buffer_init_result == 0)
            dispose((disposable_t*)&dummyKey);

        if (hmac_init_result == 0)
            dispose((disposable_t*)&options);

        dispose((disposable_t*)&alloc_opts);
    }

    int buffer_init_result;
    int hmac_init_result;
    vccrypt_mac_options_t options;
    allocator_options_t alloc_opts;
    vccrypt_buffer_t dummyKey;
};

TEST_SUITE(vccrypt_hmac512_256_ref_test);

#define BEGIN_TEST_F(name) \
TEST(name) \
{ \
    vccrypt_hmac512_256_ref_test fixture; \
    fixture.setUp();

#define END_TEST_F() \
    fixture.tearDown(); \
}

/**
 * HMAC-SHA-512/256 should have been successfully initialized.
 */
BEGIN_TEST_F(options_init)
    TEST_ASSERT(0 == fixture.hmac_init_result);
END_TEST_F()

/**
 * We should be able to create an HMAC context.
 */
BEGIN_TEST_F(init)
    vccrypt_mac_context_t context;

    TEST_ASSERT(
        0 == vccrypt_mac_init(&fixture.options, &context, &fixture.dummyKey));

    dispose((disposable_t*)&context);
END_TEST_F()

/**
 * We should be able to HMAC RFC-4231 Test Case 1.
 */
BEGIN_TEST_F(test_case_1)
    const uint8_t KEY[] = {
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b
    };
    const uint8_t DATA[] = {
        0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x9f, 0x91, 0x26, 0xc3, 0xd9, 0xc3, 0xc3, 0x30,
        0xd7, 0x60, 0x42, 0x5c, 0xa8, 0xa2, 0x17, 0xe3,
        0x1f, 0xea, 0xe3, 0x1b, 0xfe, 0x70, 0x19, 0x6f,
        0xf8, 0x16, 0x42, 0xb8, 0x68, 0x40, 0x2e, 0xab
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
             == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(
        0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()

/**
 * We should be able to HMAC RFC-4231 Test Case 2.
 */
BEGIN_TEST_F(test_case_2)
    const uint8_t KEY[] = {
        0x4a, 0x65, 0x66, 0x65
    };
    const uint8_t DATA[] = {
        0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
        0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
        0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
        0x69, 0x6e, 0x67, 0x3f
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x6d, 0xf7, 0xb2, 0x46, 0x30, 0xd5, 0xcc, 0xb2,
        0xee, 0x33, 0x54, 0x07, 0x08, 0x1a, 0x87, 0x18,
        0x8c, 0x22, 0x14, 0x89, 0x76, 0x8f, 0xa2, 0x02,
        0x05, 0x13, 0xb2, 0xd5, 0x93, 0x35, 0x94, 0x56
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
            == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()

/**
 * We should be able to HMAC RFC-4231 Test Case 3.
 */
BEGIN_TEST_F(test_case_3)
    const uint8_t KEY[] = {
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa
    };
    const uint8_t DATA[] = {
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x22, 0x90, 0x06, 0x39, 0x1d, 0x66, 0xc8, 0xec,
        0xdd, 0xf4, 0x3b, 0xa5, 0xcf, 0x8f, 0x83, 0x53,
        0x0e, 0xf2, 0x21, 0xa4, 0xe9, 0x40, 0x18, 0x40,
        0xd1, 0xbe, 0xad, 0x51, 0x37, 0xc8, 0xa2, 0xea
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
            == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()

/**
 * We should be able to HMAC RFC-4231 Test Case 4.
 */
BEGIN_TEST_F(test_case_4)
    const uint8_t KEY[] = {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19
    };
    const uint8_t DATA[] = {
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x36, 0xd6, 0x0c, 0x8a, 0xa1, 0xd0, 0xbe, 0x85,
        0x6e, 0x10, 0x80, 0x4c, 0xf8, 0x36, 0xe8, 0x21,
        0xe8, 0x73, 0x3c, 0xba, 0xfe, 0xae, 0x87, 0x63,
        0x05, 0x89, 0xfd, 0x0b, 0x9b, 0x0a, 0x2f, 0x4c
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
            == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()

/* test case 5 intentionally skipped; it's meaningless to us. */

/**
 * We should be able to HMAC RFC-4231 Test Case 6.
 */
BEGIN_TEST_F(test_case_6)
    const uint8_t KEY[] = {
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa
    };
    const uint8_t DATA[] = {
        0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69,
        0x6e, 0x67, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65,
        0x72, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x20, 0x42,
        0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x53, 0x69, 0x7a,
        0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x2d, 0x20,
        0x48, 0x61, 0x73, 0x68, 0x20, 0x4b, 0x65, 0x79,
        0x20, 0x46, 0x69, 0x72, 0x73, 0x74
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x87, 0x12, 0x3c, 0x45, 0xf7, 0xc5, 0x37, 0xa4,
        0x04, 0xf8, 0xf4, 0x7c, 0xdb, 0xed, 0xda, 0x1f,
        0xc9, 0xbe, 0xc6, 0x0e, 0xeb, 0x97, 0x19, 0x82,
        0xce, 0x7e, 0xf1, 0x0e, 0x77, 0x4e, 0x65, 0x39
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
            == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()

/**
 * We should be able to HMAC RFC-4231 Test Case 7.
 */
BEGIN_TEST_F(test_case_7)
    const uint8_t KEY[] = {
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa
    };
    const uint8_t DATA[] = {
        0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
        0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x75,
        0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c,
        0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68,
        0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
        0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6b, 0x65,
        0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20,
        0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74,
        0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63,
        0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x64,
        0x61, 0x74, 0x61, 0x2e, 0x20, 0x54, 0x68, 0x65,
        0x20, 0x6b, 0x65, 0x79, 0x20, 0x6e, 0x65, 0x65,
        0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
        0x20, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20,
        0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,
        0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65,
        0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
        0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x6c,
        0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x6e, 0xa8, 0x3f, 0x8e, 0x73, 0x15, 0x07, 0x2c,
        0x0b, 0xda, 0xa3, 0x3b, 0x93, 0xa2, 0x6f, 0xc1,
        0x65, 0x99, 0x74, 0x63, 0x7a, 0x9d, 0xb8, 0xa8,
        0x87, 0xd0, 0x6c, 0x05, 0xa7, 0xf3, 0x5a, 0x66
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
            == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()

/**
 * Key exactly equals block size.
 */
BEGIN_TEST_F(test_key_block_size)
    const uint8_t KEY[] = {
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
    };
    const uint8_t DATA[] = {
        't', 'e', 's', 't'
    };
    const uint8_t EXPECTED_HMAC[] = {
        0x8d, 0xf3, 0xb7, 0xfb, 0xcc, 0x0f, 0x86, 0x16,
        0x75, 0xee, 0xed, 0x9a, 0x0f, 0xaa, 0xd4, 0xff,
        0x43, 0xf7, 0xe7, 0xab, 0x3e, 0xd6, 0xc5, 0x88,
        0x07, 0x2b, 0x59, 0x21, 0xea, 0x4e, 0x86, 0xee
    };

    vccrypt_buffer_t keybuf, outbuf;
    vccrypt_mac_context_t context;

    //create key buffer
    TEST_ASSERT(
        0 == vccrypt_buffer_init(&keybuf, &fixture.alloc_opts, sizeof(KEY)));
    memcpy(keybuf.data, KEY, sizeof(KEY));

    //initialize MAC
    TEST_ASSERT(0 == vccrypt_mac_init(&fixture.options, &context, &keybuf));

    //digest input
    TEST_ASSERT(0 == vccrypt_mac_digest(&context, DATA, sizeof(DATA)));

    //create output buffer
    TEST_ASSERT(
        0
            == vccrypt_buffer_init(
                    &outbuf, &fixture.alloc_opts, fixture.options.mac_size));

    //finalize hmac
    TEST_ASSERT(0 == vccrypt_mac_finalize(&context, &outbuf));

    //the HMAC output should match our expected HMAC
    TEST_ASSERT(0 == memcmp(outbuf.data, EXPECTED_HMAC, sizeof(EXPECTED_HMAC)));

    //clean up
    dispose((disposable_t*)&outbuf);
    dispose((disposable_t*)&context);
    dispose((disposable_t*)&keybuf);
END_TEST_F()
